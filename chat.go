package openai_gosdk

const chatURL = "https://api.openai.com/v1/chat/completions"

type Message struct {
	Role    Role   `json:"role"`
	Content string `json:"content"`
}

type Role string

var (
	RoleSystem    = Role("system")
	RoleUser      = Role("user")
	RoleAssistant = Role("assistant")
)

type RequestChat struct {
	// string Required
	// ID of the model to use. Currently, only gpt-3.5-turbo and gpt-3.5-turbo-0301 are supported.
	Model *string `json:"model"`

	// array Required
	// The messages to generate chat completions for, in the chat format. https://platform.openai.com/docs/guides/chat/introduction
	Messages []Message `json:"messages"`

	// number Optional Defaults to 1
	// What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.
	//
	// We generally recommend altering this or top_p but not both.
	Temperature float64 `json:"temperature,omitempty"`

	// number Optional Defaults to 1
	// An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.
	//
	// We generally recommend altering this or temperature but not both.
	TopP float64 `json:"top_p,omitempty"`

	// integer Optional Defaults to 1
	// How many chat completion choices to generate for each input message.
	N int `json:"n,omitempty"`

	// boolean Optional Defaults to false
	// If set, partial message deltas will be sent, like in ChatGPT. Tokens will be sent as data-only server-sent events as they become available, with the stream terminated by a data: [DONE] message. https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format as they become available, with the stream terminated by a message.data: [DONE]
	Stream bool `json:"stream,omitempty"`

	// string or array Optional Defaults to null
	// Up to 4 sequences where the API will stop generating further tokens.
	Stop StrongOrArray `json:"stop,omitempty"`

	// integer Optional Defaults to inf
	// The maximum number of tokens allowed for the generated answer. By default, the number of tokens the model can return will be (4096 - prompt tokens).
	MaxTokens int `json:"max_tokens,omitempty"`

	// Optional Defaults to 0
	// Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model's likelihood to talk about new topics.
	// See more information about frequency and presence penalties. https://platform.openai.com/docs/api-reference/parameter-details
	PresencePenalty float64 `json:"presence_penalty,omitempty"`

	// number Optional Defaults to 0
	// Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model's likelihood to repeat the same line verbatim.
	// See more information about frequency and presence penalties. https://platform.openai.com/docs/api-reference/parameter-details
	FrequencyPenalty float64 `json:"frequency_penalty,omitempty"`

	// map Optional Defaults to null
	// Modify the likelihood of specified tokens appearing in the completion.
	//
	// Accepts a json object that maps tokens (specified by their token ID in the tokenizer) to an associated bias value from -100 to 100. Mathematically, the bias is added to the logits generated by the model prior to sampling. The exact effect will vary per model, but values between -1 and 1 should decrease or increase likelihood of selection; values like -100 or 100 should result in a ban or exclusive selection of the relevant token.
	LogitBias map[string]interface{} `json:"logit_bias,omitempty"`

	// string Optional
	// A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. Learn more. https://platform.openai.com/docs/guides/safety-best-practices
	User string `json:"user,omitempty"`
}

type ResponseChat struct {
	Id      string `json:"id"`
	Object  string `json:"object"`
	Created int    `json:"created"`
	Choices []struct {
		Index   int `json:"index"`
		Message struct {
			Role    string `json:"role"`
			Content string `json:"content"`
		} `json:"message"`
		FinishReason string `json:"finish_reason"`
	} `json:"choices"`
	Usage struct {
		PromptTokens     int `json:"prompt_tokens"`
		CompletionTokens int `json:"completion_tokens"`
		TotalTokens      int `json:"total_tokens"`
	} `json:"usage"`
}

func NewChat(baseOpenAI BaseOpenAI) OpenAI[RequestChat, ResponseChat] {
	return OpenAI[RequestChat, ResponseChat]{
		BaseOpenAI: baseOpenAI,
		TargetURL:  chatURL,
		Method:     POST,
	}
}

type ResponseChatWithStream struct {
	Id      string `json:"id"`
	Object  string `json:"object"`
	Created int    `json:"created"`
	Model   string `json:"model"`
	Choices []struct {
		Delta struct {
			Role    string `json:"role"`
			Content string `json:"content"`
		} `json:"delta"`
		Index        int         `json:"index"`
		FinishReason interface{} `json:"finish_reason"`
	} `json:"choices"`
}

func NewChatWithStream(baseOpenAI BaseOpenAI) OpenAIWithStream[RequestChat, ResponseChatWithStream] {
	return OpenAIWithStream[RequestChat, ResponseChatWithStream]{
		BaseOpenAI: baseOpenAI,
		TargetURL:  chatURL,
		Method:     POST,
	}
}
