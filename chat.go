package openai_gosdk

const chatURL = "https://api.openai.com/v1/chat/completions"

type Message struct {
	// string Required
	// The role of the messages author. One of , , , or .system user assistant function
	Role Role `json:"role"`

	// string Optional
	// The contents of the message. is required for all messages except assistant messages with function calls.content
	Content string `json:"content,omitempty"`

	// string Optional
	// The name of the author of this message. is required if role is , and it should be the name of the function whose response is in the . May contain a-z, A-Z, 0-9, and underscores, with a maximum length of 64 characters.name function content
	Name string `json:"name,omitempty"`

	// object Optional
	// The name and arguments of a function that should be called, as generated by the model.
	FunctionCall interface{} `json:"function_call,omitempty"`
}

type Function struct {
	// string Required
	// The name of the function to be called. Must be a-z, A-Z, 0-9, or contain underscores and dashes, with a maximum length of 64.
	Name string `json:"name"`

	// string Optional
	// The description of what the function does.
	Description string `json:"description,omitempty"`

	// object Optional
	// The parameters the functions accepts, described as a JSON Schema object. See the guide https://platform.openai.com/docs/guides/gpt/function-calling for examples, and the JSON Schema reference https://json-schema.org/understanding-json-schema/ for documentation about the format.
	Parameters interface{} `json:"parameters,omitempty"`
}

type Role string

var (
	RoleSystem    = Role("system")
	RoleUser      = Role("user")
	RoleAssistant = Role("assistant")
	RoleFunction  = Role("function")
)

type RequestChat struct {
	// string Required
	// ID of the model to use. See the model endpoint compatibility https://platform.openai.com/docs/models/model-endpoint-compatibility table for details on which models work with the Chat API.
	Model *string `json:"model"`

	// array Required
	// A list of messages comprising the conversation so far. Example Python code https://github.com/openai/openai-cookbook/blob/main/examples/How_to_format_inputs_to_ChatGPT_models.ipynb.
	Messages []Message `json:"messages"`

	// array Optional
	// A list of functions the model may generate JSON inputs for.
	Functions []Function `json:"functions,omitempty"`

	// string or object Optional
	// Controls how the model responds to function calls. "none" means the model does not call a function, and responds to the end-user. "auto" means the model can pick between an end-user or calling a function. Specifying a particular function via forces the model to call that function. "none" is the default when no functions are present. "auto" is the default if functions are present.{"name":\ "my_function"}
	FunctionCall interface{} `json:"function_call,omitempty"`

	// number Optional Defaults to 1
	// What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.
	//
	// We generally recommend altering this or but not both.top_p
	Temperature float64 `json:"temperature,omitempty"`

	// number Optional Defaults to 1
	// An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.
	//
	// We generally recommend altering this or but not both.temperature
	TopP float64 `json:"top_p,omitempty"`

	// integer Optional Defaults to 1
	// How many chat completion choices to generate for each input message.
	N int `json:"n,omitempty"`

	// boolean Optional Defaults to false
	// If set, partial message deltas will be sent, like in ChatGPT. Tokens will be sent as data-only server-sent events https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format as they become available, with the stream terminated by a message. Example Python code.data: https://github.com/openai/openai-cookbook/blob/main/examples/How_to_stream_completions.ipynb [DONE]
	Stream bool `json:"stream,omitempty"`

	// string or array Optional Defaults to null
	// Up to 4 sequences where the API will stop generating further tokens.
	Stop StrongOrArray `json:"stop,omitempty"`

	// integer Optional Defaults to inf
	// The maximum number of tokens https://platform.openai.com/tokenizer to generate in the chat completion.
	//
	// The total length of input tokens and generated tokens is limited by the model's context length. Example Python code https://github.com/openai/openai-cookbook/blob/main/examples/How_to_count_tokens_with_tiktoken.ipynb for counting tokens.
	MaxTokens int `json:"max_tokens,omitempty"`

	// Optional Defaults to 0
	// Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model's likelihood to talk about new topics.
	//
	// See more information about frequency and presence penalties https://platform.openai.com/docs/api-reference/parameter-details.
	PresencePenalty float64 `json:"presence_penalty,omitempty"`

	// number Optional Defaults to 0
	// Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model's likelihood to repeat the same line verbatim.
	//
	// See more information about frequency and presence penalties https://platform.openai.com/docs/api-reference/parameter-details.
	FrequencyPenalty float64 `json:"frequency_penalty,omitempty"`

	// map Optional Defaults to null
	// Modify the likelihood of specified tokens appearing in the completion.
	//
	// Accepts a json object that maps tokens (specified by their token ID in the tokenizer) to an associated bias value from -100 to 100. Mathematically, the bias is added to the logits generated by the model prior to sampling. The exact effect will vary per model, but values between -1 and 1 should decrease or increase likelihood of selection; values like -100 or 100 should result in a ban or exclusive selection of the relevant token.
	LogitBias map[string]interface{} `json:"logit_bias,omitempty"`

	// string Optional
	// A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. Learn more https://platform.openai.com/docs/guides/safety-best-practices/end-user-ids.
	User string `json:"user,omitempty"`
}

type ResponseChat struct {
	Id      string `json:"id"`
	Object  string `json:"object"`
	Created int    `json:"created"`
	Choices []struct {
		Index   int `json:"index"`
		Message struct {
			Role    string `json:"role"`
			Content string `json:"content"`
		} `json:"message"`
		FinishReason string `json:"finish_reason"`
	} `json:"choices"`
	Usage struct {
		PromptTokens     int `json:"prompt_tokens"`
		CompletionTokens int `json:"completion_tokens"`
		TotalTokens      int `json:"total_tokens"`
	} `json:"usage"`
}

func NewChat(baseOpenAI BaseOpenAI) OpenAI[RequestChat, ResponseChat] {
	return OpenAI[RequestChat, ResponseChat]{
		BaseOpenAI: baseOpenAI,
		TargetURL:  chatURL,
		Method:     POST,
	}
}

type ResponseChatWithStream struct {
	Id      string `json:"id"`
	Object  string `json:"object"`
	Created int    `json:"created"`
	Model   string `json:"model"`
	Choices []struct {
		Delta struct {
			Role    string `json:"role"`
			Content string `json:"content"`
		} `json:"delta"`
		Index        int         `json:"index"`
		FinishReason interface{} `json:"finish_reason"`
	} `json:"choices"`
}

func NewChatWithStream(baseOpenAI BaseOpenAI) OpenAIWithStream[RequestChat, ResponseChatWithStream] {
	return OpenAIWithStream[RequestChat, ResponseChatWithStream]{
		BaseOpenAI: baseOpenAI,
		TargetURL:  chatURL,
		Method:     POST,
	}
}
